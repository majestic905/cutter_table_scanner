{"version":3,"sources":["hooks/useFetch.js","hooks/useModal.js","components/settings_modal.js","components/header.js","components/log.js","components/shared/tabs.js","components/shared/images.js","components/snapshot.js","components/capture.js","app.js","index.js"],"names":["useFetch","url","useState","isLoading","setIsLoading","undefined","response","setResponse","error","setError","options","setOptions","doFetch","useCallback","useEffect","isUnmounted","sendRequest","a","ky","json","name","message","useModal","defaultIsOpened","isOpened","setIsOpened","openModal","closeModal","toggleModal","SettingsModal","data","setData","JSON","stringify","doSubmit","ev","preventDefault","method","headers","body","target","elements","settings","value","btnClassName","cx","loading","className","onSubmit","onClick","type","id","defaultValue","Header","getScan","requestScan","scanType","searchParams","scan_type","timeout","alert","Log","text","readOnly","Tab","isActive","active","data-tab-name","href","Tabs","children","DownloadableImage","src","alt","download","props","document","createElement","split","pop","appendChild","click","removeChild","Image","ImagesGrid","images","Component","isClickable","map","key","transformUrls","createdAt","thumb","image","ResultImage","Date","toISOString","slice","replace","Snapshot","scan","activeTab","setActiveTab","selectTab","currentTarget","dataset","tabName","original","projected","result","position","log","Capture","App","setScan","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6cc283e5.chunk.js","sourcesContent":["import {useState, useEffect, useCallback} from 'react'\nimport ky from 'ky';\n\n\nconst useFetch = (url) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [response, setResponse] = useState(undefined);\n    const [error, setError] = useState(undefined);\n    const [options, setOptions] = useState({});\n\n\n    const doFetch = useCallback((options = {}) => {\n        setOptions(options);\n        setIsLoading(true);\n        setError(undefined);\n    }, []);\n\n\n    useEffect(() => {\n        if (!isLoading)\n            return;\n\n        let isUnmounted = false;\n\n        async function sendRequest() {\n            try {\n                const json = await ky(url, options).json();\n\n                if (isUnmounted)\n                    return;\n\n                setResponse(json);\n                setIsLoading(false);\n            } catch (error) {\n                if (isUnmounted)\n                    return;\n\n                if (error.name === 'HTTPError')\n                    setError((await error.response.json()).message);\n                else\n                    setError(error.message);\n\n                setIsLoading(false);\n            }\n        }\n\n        sendRequest();\n\n        return () => {\n            isUnmounted = true;\n        };\n    }, [isLoading, url, options]);\n\n    return [{isLoading, response, error}, doFetch];\n};\n\n\nexport default useFetch;","import {useState, useCallback} from 'react'\n\n\nconst useModal = (defaultIsOpened = false) => {\n    const [isOpened, setIsOpened] = useState(defaultIsOpened);\n\n    const openModal = useCallback(() => setIsOpened(true), [setIsOpened]);\n    const closeModal = useCallback(() => setIsOpened(false), [setIsOpened]);\n    const toggleModal = useCallback(() => setIsOpened(isOpened => !isOpened), [setIsOpened])\n\n    return {openModal, closeModal, toggleModal, isOpened};\n};\n\nexport default useModal;","import {useCallback, useEffect, useState} from \"react\";\nimport useFetch from \"../hooks/useFetch\";\nimport cx from \"classnames\";\n\n\nconst SettingsModal = ({closeModal}) => {\n    const [data, setData] = useState();\n\n    const [{isLoading, response, error}, doFetch] = useFetch('/api/cameras');  // for both GET and POST\n\n    useEffect(doFetch, [doFetch]);\n\n    useEffect(() => {\n        if (response !== undefined && !data) { // GET\n            setData(JSON.stringify(response, null, 2));\n        } else if (response !== undefined && data) // POST\n            closeModal();\n    }, [response, setData, closeModal]);\n\n    const doSubmit = useCallback(ev => {\n        ev.preventDefault();\n\n        doFetch({\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: ev.target.elements.settings.value\n        });\n    }, [doFetch]);\n\n    const btnClassName = cx(\"btn btn-primary float-right mr-2\", {loading: isLoading});\n\n    return (\n        <form className=\"modal active\" onSubmit={doSubmit}>\n            <span className=\"modal-overlay\" onClick={closeModal}/>\n            <div className=\"modal-container modal-fullheight\">\n                <div className=\"modal-header\">\n                    <button type=\"button\" className=\"btn btn-link float-right\" onClick={closeModal}>Закрыть</button>\n                    <input type=\"submit\" className={btnClassName} value=\"Отправить\"/>\n\n                    <div className=\"modal-title h5\">Настройки</div>\n                </div>\n                <ul className=\"mt-0\">\n                   <li className=\"mt-0\">\n                       Значения table_section_size (миллиметры) напрямую в программе не используются, они здесь для того чтобы были.\n                   </li>\n                   <li className=\"mt-0\">\n                       Значения projected_image_size (пиксели) используются; задаются вручную; должны быть строго пропорциональны значениям table_section_size!\n                   </li>\n               </ul>\n                {error && <div className=\"modal-header pt-0\">\n                     <div className=\"toast toast-error\">{error}</div>\n                </div>}\n                <div className=\"modal-body pt-0\">\n                    {data && <textarea id=\"settings\" name=\"settings\" className=\"form-input\" defaultValue={data}/>}\n                    {isLoading && <div className=\"loading loading-lg\"/>}\n                </div>\n            </div>\n        </form>\n    )\n};\n\n\nexport default SettingsModal;","import {useCallback, useEffect} from \"react\";\nimport cx from \"classnames\";\nimport useModal from \"../hooks/useModal\";\nimport useFetch from \"../hooks/useFetch\";\nimport SettingsModal from \"./settings_modal\";\n\n\nconst Header = ({getScan}) => {\n    const {isOpened, closeModal, openModal} = useModal();\n\n    const [{isLoading, response, error}, doFetch] = useFetch('/api/scan');\n\n    const requestScan = useCallback(scanType => {\n        doFetch({method: 'POST', searchParams: {scan_type: scanType}, timeout: 50000});\n    }, [doFetch]);\n\n    useEffect(() => {\n        if (response)\n            alert('Сканирование выполнено');\n        else if (error)\n            alert(`Произошла ошибка, сканирование не выполнено: ${error}`);\n\n        if (response || error)\n            getScan();\n    }, [response, error, getScan]);\n\n    return (\n        <header className=\"navbar\">\n            <section className=\"navbar-section\">\n                <button className={cx(\"btn btn-primary mr-2\", {loading: isLoading})}\n                        onClick={() => requestScan('snapshot')}\n                >\n                    Сканировать\n                </button>\n\n                <button className={cx(\"btn btn-primary mr-2\", {loading: isLoading})}\n                        onClick={() => requestScan('capture')}\n                >\n                    Сделать фото\n                </button>\n\n                <button type=\"button\" className={cx('btn mr-2', {loading: isLoading})}\n                        onClick={openModal}\n                >\n                    Настройки\n                </button>\n            </section>\n\n            {isOpened && <SettingsModal closeModal={closeModal} />}\n        </header>\n    )\n}\n\nexport default Header;","const Log = ({text}) => {\n    return (\n        <textarea id=\"log\" className=\"form-input\" value={text} readOnly/>\n    );\n}\n\nexport default Log;","import cx from \"classnames\";\n\nexport const Tab = ({text, isActive, name, onClick}) => {\n    const className = cx(\"tab-item text-bold text-uppercase\", {active: isActive});\n    return (\n        <li className={className} data-tab-name={name} onClick={onClick}>\n            <a href=\"#\">{text}</a>\n        </li>\n    )\n}\n\nexport const Tabs = ({children}) => {\n    return (\n        <ul className=\"tab\">\n            {children}\n        </ul>\n    )\n}","export const DownloadableImage = ({url, src, alt, download, ...props}) => {\n    alt = alt || src;\n    url = url || src;\n\n    const onClick = () => {\n        let a = document.createElement('a');\n        a.href = url;\n        a.download = download || url.split('/').pop();\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n    };\n\n    return (\n        <img className=\"img-responsive clickable c-hand\" src={src} alt={alt} onClick={onClick} {...props}/>\n    )\n};\n\n\nconst Image = ({src, alt, ...props}) => {\n    alt = alt || src;\n\n    return (\n        <img className=\"img-responsive\" src={src} alt={alt} {...props} />\n    )\n};\n\n\nexport const ImagesGrid = ({images, isClickable}) => {\n    const Component = isClickable ? DownloadableImage : Image;\n\n    const children = ['LU', 'RU', 'LL', 'RL'].map(key =>\n        <div key={key} className=\"column col-6\">\n            <Component {...images[key]}/>\n        </div>\n    )\n\n    return (\n        <div className=\"container grid-lg images-grid\">\n            <div className=\"columns\">\n                {children}\n            </div>\n        </div>\n    )\n}","import {useCallback, useState} from \"react\";\nimport Log from \"./log\";\nimport {Tabs, Tab} from \"./shared/tabs\";\nimport {ImagesGrid, DownloadableImage} from \"./shared/images\";\n\n\nfunction transformUrls({thumb, image}, createdAt) {\n    return {src: `${thumb}?${createdAt}`, alt: image, url: image};\n}\n\n\nconst ResultImage = ({url, createdAt}) => {\n    const src = `${url}?${createdAt}`;\n\n    createdAt = new Date(createdAt).toISOString().slice(0, 19).replace(/[-:T]/g, '_');\n    const download = `result_${createdAt}.jpg`\n\n    return (\n        <div className=\"container grid-lg\">\n            <DownloadableImage src={src} alt={url} url={url} download={download} id=\"result\"/>\n        </div>\n    )\n}\n\n\nconst Snapshot = ({scan}) => {\n    const [activeTab, setActiveTab] = useState('result');\n    const selectTab = useCallback(ev => setActiveTab(ev.currentTarget.dataset.tabName), [setActiveTab]);\n\n    const images = {original: {}, projected: {}, result: scan.images.result};\n    for (const name of ['original', 'projected'])\n        for (const position of ['LU', 'LL', 'RU', 'RL'])\n            images[name][position] = transformUrls(scan.images[name][position], scan.createdAt);\n\n    return (\n        <div>\n            <Tabs>\n                <Tab onClick={selectTab} name=\"original\" text=\"Original\" isActive={activeTab === \"original\"}/>\n                <Tab onClick={selectTab} name=\"projected\" text=\"Projected\" isActive={activeTab === \"projected\"}/>\n                <Tab onClick={selectTab} name=\"result\" text=\"Result\" isActive={activeTab === \"result\"}/>\n                <Tab onClick={selectTab} name=\"log\" text=\"Log\" isActive={activeTab === \"log\"}/>\n            </Tabs>\n\n            {activeTab === \"original\" && <ImagesGrid images={images.original} isClickable/>}\n            {activeTab === \"projected\" && <ImagesGrid images={images.projected} isClickable/>}\n            {activeTab === \"result\" && <ResultImage url={images.result.image} createdAt={scan.createdAt}/>}\n            {activeTab === \"log\" && <Log text={scan.log}/>}\n        </div>\n    )\n}\n\n\nexport default Snapshot;","import {useCallback, useState} from \"react\";\nimport Log from \"./log\";\nimport {Tabs, Tab} from \"./shared/tabs\";\nimport {ImagesGrid} from \"./shared/images\";\n\n\nconst Capture = ({scan}) => {\n    const [activeTab, setActiveTab] = useState('original');\n    const selectTab = useCallback(ev => setActiveTab(ev.currentTarget.dataset.tabName), [setActiveTab]);\n\n    const images = {original: {}};\n    for (const name in images) {\n        for (const position of ['LU', 'LL', 'RU', 'RL']) {\n            const {image, thumb} = scan.images[name][position];\n            images[name][position] = {src: `${thumb}?${scan.createdAt}`, alt: image, url: image};\n        }\n    }\n\n    return (\n        <div>\n            <Tabs>\n                <Tab onClick={selectTab} name=\"original\" text=\"Original\" isActive={activeTab === \"original\"}/>\n                <Tab onClick={selectTab} name=\"log\" text=\"Log\" isActive={activeTab === \"log\"}/>\n            </Tabs>\n\n            {activeTab === \"original\" && <ImagesGrid images={images.original} isClickable/>}\n            {activeTab === \"log\" && <Log text={scan.log}/>}\n        </div>\n    )\n}\n\n\nexport default Capture;","import {useState, useEffect} from \"react\";\nimport useFetch from \"./hooks/useFetch\";\nimport Header from \"./components/header\";\nimport Snapshot from \"./components/snapshot\";\nimport Capture from \"./components/capture\";\nimport './app.scss';\n\n\nfunction App() {\n    const [scan, setScan] = useState(null);\n\n    const [{isLoading, response, error}, getScan] = useFetch(\"/api/scan\");\n\n    useEffect(getScan, [getScan]);\n\n    useEffect(() => {\n        if (response)\n            setScan(response);\n        else if (error)\n            alert(`Ошибка при загрузке скана: ${error}`);\n    }, [response, error]);\n\n    return (\n        <main>\n            <Header getScan={getScan} />\n\n            {isLoading && <div className=\"loading mt-2\"/>}\n            {scan?.scanType === \"snapshot\" && <Snapshot scan={scan}/>}\n            {scan?.scanType === \"capture\" && <Capture scan={scan}/>}\n        </main>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'spectre.css/dist/spectre.min.css';\nimport 'spectre.css/dist/spectre-icons.min.css';\n\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n// import reportWebVitals from './reportWebVitals';\n// reportWebVitals(console.log);"],"sourceRoot":""}