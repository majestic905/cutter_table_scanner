{"version":3,"sources":["hooks/useFetch.js","images/folder-24px.svg","components/scans_list.js","hooks/useModal.js","components/scan/shared.js","components/scan/snapshot.js","components/scan/calibration.js","components/settings_modal.js","components/scan/index.js","app.js","index.js"],"names":["useFetch","url","useState","isLoading","setIsLoading","undefined","response","setResponse","error","setError","options","setOptions","doFetch","useCallback","useEffect","isUnmounted","sendRequest","a","ky","json","name","message","Item","item","isSelected","createdAt","doSelect","className","cx","onClick","data-id","scanId","src","folderSvg","alt","scanType","DeleteButton","onDelete","doDelete","window","confirm","method","alert","btnClassName","loading","type","ScansList","scans","loadScans","selectedScan","selectScan","ev","id","currentTarget","dataset","scan","find","map","useModal","defaultIsOpened","isOpened","setIsOpened","openModal","closeModal","toggleModal","Tab","text","isActive","active","data-tab-name","href","Tabs","children","ClickableImage","filename","props","pathItems","split","length","doDownloadFile","fetch","then","resp","blob","URL","createObjectURL","document","createElement","style","display","download","body","appendChild","click","revokeObjectURL","catch","console","Image","ImagesGrid","images","Component","isClickable","key","ResultImage","Snapshot","activeTab","setActiveTab","selectTab","tabName","position","thumb","result","image","original","undistorted","projected","Calibration","SettingsModal","data","setData","space","replacer","value","Array","JSON","stringify","replace","getIndentedJSON","doSubmit","preventDefault","headers","target","elements","settings","onSubmit","defaultValue","Scan","requestScan","searchParams","timeout","App","setSelectedScan","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d5348af5.chunk.js","sourcesContent":["import {useState, useEffect, useCallback} from 'react'\nimport ky from 'ky';\n\n\nconst useFetch = (url) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [response, setResponse] = useState(undefined);\n    const [error, setError] = useState(undefined);\n    const [options, setOptions] = useState({});\n\n\n    const doFetch = useCallback((options = {}) => {\n        setOptions(options);\n        setIsLoading(true);\n        setError(undefined);\n    }, []);\n\n\n    useEffect(() => {\n        if (!isLoading)\n            return;\n\n        let isUnmounted = false;\n\n        async function sendRequest() {\n            try {\n                const json = await ky(url, options).json();\n\n                if (isUnmounted)\n                    return;\n\n                setResponse(json);\n                setIsLoading(false);\n            } catch (error) {\n                if (isUnmounted)\n                    return;\n\n                if (error.name === 'HTTPError')\n                    setError((await error.response.json()).message);\n                else\n                    setError(error.message);\n                setIsLoading(false);\n            }\n        }\n\n        sendRequest();\n\n        return () => {\n            isUnmounted = true;\n        };\n    }, [isLoading, url, options]);\n\n    return [{isLoading, response, error}, doFetch];\n};\n\n\nexport default useFetch;","export default __webpack_public_path__ + \"static/media/folder-24px.075add64.svg\";","import {useCallback, useEffect} from \"react\";\nimport cx from 'classnames';\nimport folderSvg from \"../images/folder-24px.svg\";\nimport useFetch from \"../hooks/useFetch\";\n\n\nconst Item = ({item, createdAt, isSelected, doSelect}) => {\n    const className = cx({'text-bold': isSelected});\n\n    return (\n        <li>\n            <span className={className} onClick={doSelect} data-id={item.scanId}>\n                <img src={folderSvg} alt=\"folder_icon\"/>\n                <span>{item.createdAt} ({item.scanType[0]})</span>\n            </span>\n        </li>\n    )\n}\n\nconst DeleteButton = ({onDelete}) => {\n    const [{isLoading, response, error}, doFetch] = useFetch(\"/api/scans\");\n\n    const doDelete = useCallback(() => {\n        if (window.confirm('Точно удалить?'))\n            doFetch({method: 'DELETE'});\n    }, [onDelete]);\n\n    useEffect(() => {\n        if (response)\n            onDelete();\n        else if (error)\n            alert(`Ошибка при удалении: ${error}`);\n    }, [response, error]);\n\n    const btnClassName = cx(\"btn btn-sm btn-primary\", {loading: isLoading});\n\n    return (\n        <button type=\"button\" className={btnClassName} onClick={doDelete}>\n            Удалить все\n        </button>\n    )\n}\n\nconst ScansList = ({scans, loadScans, selectedScan, selectScan}) => {\n    const doSelect = useCallback(ev => {\n        const id = ev.currentTarget.dataset.id;\n        const scan = scans.find(item => item.scanId === id);\n        selectScan(scan);\n    }, [selectScan, scans]);\n\n    if (!scans)\n        return null;\n\n    return (\n        <div className=\"tree\" id=\"scans-list\">\n            <header>\n                <DeleteButton onDelete={loadScans} />\n            </header>\n\n            <hr/>\n\n            <ul>\n                {scans.map(item => <Item key={item.scanId}\n                                         item={item}\n                                         isSelected={item === selectedScan}\n                                         doSelect={doSelect}\n                />)}\n            </ul>\n        </div>\n    )\n}\n\nexport default ScansList;","import {useState, useCallback} from 'react'\n\n\nconst useModal = (defaultIsOpened = false) => {\n    const [isOpened, setIsOpened] = useState(defaultIsOpened);\n\n    const openModal = useCallback(() => setIsOpened(true), [setIsOpened]);\n    const closeModal = useCallback(() => setIsOpened(false), [setIsOpened]);\n    const toggleModal = useCallback(() => setIsOpened(isOpened => !isOpened), [setIsOpened])\n\n    return {openModal, closeModal, toggleModal, isOpened};\n};\n\nexport default useModal;","import cx from \"classnames\";\nimport {useCallback} from \"react\";\n\nexport const Tab = ({text, isActive, name, onClick}) => {\n    const className = cx(\"tab-item text-tiny text-bold text-uppercase\", {active: isActive});\n    return (\n        <li className={className} data-tab-name={name} onClick={onClick}>\n            <a href=\"#\">{text}</a>\n        </li>\n    )\n}\n\nexport const Tabs = ({children}) => {\n    return (\n        <ul className=\"tab tab-block\">\n            {children}\n        </ul>\n    )\n}\n\nexport const ClickableImage = ({filename, url, src, alt, ...props}) => {\n    alt = alt || src;\n    url = url || src;\n\n    if (!filename && url) {\n        const pathItems = url.split('/');\n        filename = pathItems[pathItems.length - 1];\n    }\n\n    const doDownloadFile = useCallback(() => {\n        fetch(url)\n          .then(resp => resp.blob())\n          .then(blob => {\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n            window.URL.revokeObjectURL(url);\n          })\n          .catch(error => {\n              console.error(error);\n              alert(error.message);\n          });\n    }, [url, filename]);\n\n    return (\n        <img className=\"img-responsive clickable c-hand\" src={src} alt={alt} onClick={doDownloadFile} {...props}/>\n    )\n};\n\n\nconst Image = ({src, alt, ...props}) => {\n    alt = alt || src;\n\n    return (\n        <img className=\"img-responsive\" src={src} alt={alt} {...props} />\n    )\n};\n\n\nexport const ImagesGrid = ({images, isClickable}) => {\n    const Component = isClickable ? ClickableImage : Image;\n\n    const children = ['LU', 'RU', 'LL', 'RL'].map(key =>\n        <div key={key} className=\"column col-6\">\n            <Component {...images[key]}/>\n        </div>\n    )\n\n    return (\n        <div className=\"container grid-xs\">\n            <div className=\"columns\">\n                {children}\n            </div>\n        </div>\n    )\n}","import {useCallback, useState} from \"react\";\nimport {Tab, Tabs, ImagesGrid, ClickableImage} from './shared';\n\n\nconst ResultImage = (props) => {\n    return (\n        <div className=\"container grid-xs\">\n            <ClickableImage {...props}/>\n        </div>\n    )\n}\n\n\nconst Snapshot = ({scan}) => {\n    const [activeTab, setActiveTab] = useState('result');\n    const selectTab = useCallback(ev => setActiveTab(ev.currentTarget.dataset.tabName), [setActiveTab]);\n\n    const images = {};\n    for (const name of ['original', 'undistorted', 'projected']) {\n        images[name] = {};\n        for (const position of ['LU', 'LL', 'RU', 'RL']) {\n            const src = scan.images[name][position].thumb;\n            images[name][position] = {src, alt: src};\n        }\n    }\n    images.result = {\n        src: scan.images.result.thumb,\n        alt: scan.images.result.thumb,\n        url: scan.images.result.image,\n        filename: `${scan.scanId}_result.jpg`\n    }\n\n    return (\n        <div>\n            <Tabs activeTab={activeTab} selectTab={selectTab}>\n                <Tab onClick={selectTab} name=\"original\" text=\"Original\" isActive={activeTab === \"original\"}/>\n                <Tab onClick={selectTab} name=\"undistorted\" text=\"Undistorted\" isActive={activeTab === \"undistorted\"}/>\n                <Tab onClick={selectTab} name=\"projected\" text=\"Projected\" isActive={activeTab === \"projected\"}/>\n                <Tab onClick={selectTab} name=\"result\" text=\"Result\" isActive={activeTab === \"result\"}/>\n            </Tabs>\n\n            {activeTab === \"original\" && <ImagesGrid images={images.original}/>}\n            {activeTab === \"undistorted\" && <ImagesGrid images={images.undistorted}/>}\n            {activeTab === \"projected\" && <ImagesGrid images={images.projected}/>}\n            {activeTab === \"result\" && <ResultImage {...images.result}/>}\n        </div>\n    )\n}\n\n\nexport default Snapshot;","import {useCallback, useState} from \"react\";\nimport {Tab, Tabs, ImagesGrid} from './shared';\n\n\nconst Calibration = ({scan}) => {\n    const [activeTab, setActiveTab] = useState('undistorted');\n    const selectTab = useCallback(ev => setActiveTab(ev.currentTarget.dataset.tabName), [setActiveTab]);\n\n    const images = {};\n    for (const name of ['original', 'undistorted']) {\n        images[name] = {};\n        for (const position of ['LU', 'LL', 'RU', 'RL']) {\n            const src = scan.images[name][position].thumb;\n            images[name][position] = {src, alt: src};\n        }\n    }\n    for (const position of ['LU', 'LL', 'RU', 'RL'])\n        images['undistorted'][position].url = scan.images['undistorted'][position].image;\n\n    return (\n        <div>\n            <Tabs activeTab={activeTab} selectTab={selectTab}>\n                <Tab onClick={selectTab} name=\"original\" text=\"Original\" isActive={activeTab === \"original\"}/>\n                <Tab onClick={selectTab} name=\"undistorted\" text=\"Undistorted\" isActive={activeTab === \"undistorted\"}/>\n            </Tabs>\n\n            {activeTab === \"original\" && <ImagesGrid images={images.original}/>}\n            {activeTab === \"undistorted\" && <ImagesGrid images={images.undistorted} isClickable/>}\n        </div>\n    )\n}\n\n\nexport default Calibration;","import {useCallback, useEffect, useState} from \"react\";\nimport useFetch from \"../hooks/useFetch\";\nimport cx from \"classnames\";\n\n\nfunction getIndentedJSON(json, space = 4) {\n    const replacer = function(key, value) {\n       if (value instanceof Array)\n          return JSON.stringify(value);\n       return value;\n    };\n\n    return JSON.stringify(json, replacer, space)\n        .replace(/\\\"\\[/g, '[')\n        .replace(/\\]\\\"/g, ']');\n}\n\n\nconst SettingsModal = ({closeModal}) => {\n    const [data, setData] = useState();\n\n    const [{isLoading, response, error}, doFetch] = useFetch('/api/settings');  // for both GET and POST\n\n    useEffect(doFetch, [doFetch]);\n\n    useEffect(() => {\n        if (response !== undefined && !data) { // GET\n            setData(getIndentedJSON(response));\n        } else if (response !== undefined && data) // POST\n            closeModal();\n    }, [response, setData, closeModal]);\n\n    const doSubmit = useCallback(ev => {\n        ev.preventDefault();\n\n        doFetch({\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: ev.target.elements.settings.value\n        });\n    }, [doFetch]);\n\n    const btnClassName = cx(\"btn btn-primary float-right mr-2\", {loading: isLoading});\n\n    return (\n        <form className=\"modal active\" id=\"settings-modal\" onSubmit={doSubmit}>\n            <span className=\"modal-overlay\" onClick={closeModal}/>\n            <div className=\"modal-container modal-fullheight\">\n                <div className=\"modal-header\">\n                    <button type=\"button\" className=\"btn btn-link float-right\" onClick={closeModal}>Закрыть</button>\n                    <input type=\"submit\" className={btnClassName} value=\"Отправить\"/>\n\n                    <div className=\"modal-title h5\">Настройки</div>\n                </div>\n                <ul className=\"mt-0\">\n                   <li className=\"mt-0\">\n                       Значения table_section_size (миллиметры) напрямую в программе не используются, они здесь для того чтобы были.\n                   </li>\n                   <li className=\"mt-0\">\n                       Значения projected_image_size (пиксели) используются; задаются вручную; должны быть строго пропорциональны значениям table_section_size!\n                   </li>\n               </ul>\n                {error && <div className=\"modal-header pt-0\">\n                     <div className=\"toast toast-error\">{error}</div>\n                </div>}\n                <div className=\"modal-body pt-0\">\n                    {data && <textarea name=\"settings\" defaultValue={data} className=\"form-input\"/>}\n                    {!data && <div className=\"loading loading-lg\"/>}\n                </div>\n            </div>\n        </form>\n    )\n};\n\n\nexport default SettingsModal;","import {useCallback, useEffect} from \"react\";\nimport useModal from \"../../hooks/useModal\";\nimport useFetch from \"../../hooks/useFetch\";\nimport Snapshot from './snapshot';\nimport Calibration from './calibration';\nimport SettingsModal from \"../settings_modal\";\n\n\nconst Scan = ({loadScans, selectedScan}) => {\n    const {isOpened, closeModal, openModal} = useModal();\n\n    const [{isLoading, response, error}, doFetch] = useFetch('/api/scans');\n\n    const requestScan = useCallback(type => {\n        doFetch({method: 'POST', searchParams: {type}, timeout: 50000});\n    }, [doFetch]);\n\n    useEffect(() => {\n        if (response)\n            alert('Сканирование выполнено');\n        else if (error) {\n            alert(`Произошла ошибка, сканирование не выполнено: ${error}`);\n        }\n\n        if (response || error)\n            loadScans();\n    }, [response, error, loadScans]);\n\n    return (\n        <div id=\"scan\">\n            <header>\n                <button className=\"btn btn-sm btn-primary mr-2\" onClick={() => requestScan('SNAPSHOT')}>\n                    Полный скан\n                </button>\n\n                <button className=\"btn btn-sm btn-primary mr-2\" onClick={() => requestScan('CALIBRATION')}>\n                    Калибровка точек\n                </button>\n\n                <button type=\"button\" className='btn btn-sm' onClick={openModal}>\n                    Настройки\n                </button>\n            </header>\n\n            <hr/>\n\n            {selectedScan?.scanType === \"SNAPSHOT\" && <Snapshot scan={selectedScan}/>}\n            {selectedScan?.scanType === \"CALIBRATION\" && <Calibration scan={selectedScan}/>}\n            {isOpened && <SettingsModal closeModal={closeModal} />}\n        </div>\n    )\n}\n\nexport default Scan;","import {useState, useEffect} from \"react\";\nimport useFetch from \"./hooks/useFetch\";\n\nimport ScansList from \"./components/scans_list\";\nimport Scan from \"./components/scan\";\n\nimport './app.scss';\n\n\n\nfunction App() {\n    const [selectedScan, setSelectedScan] = useState(null);\n\n    const [{isLoading, response, error}, loadScans] = useFetch(\"/api/scans\");\n\n    useEffect(loadScans, [loadScans]);\n\n    useEffect(() => {\n        if (response && response.scans.length > 0)\n            setSelectedScan(response.scans[0]);\n        else if (error)\n            alert(`Ошибка при загрузке списка: ${error}`);\n    }, [response, error]);\n\n    if (isLoading && !response)\n        return <div className=\"loading mt-2\"/>;\n\n    // ------------\n\n    return (\n        <main className=\"container\">\n            <div className=\"columns\">\n                <div className=\"column col-3\" id=\"column-left\">\n                    <ScansList scans={response?.scans} loadScans={loadScans}\n                           selectedScan={selectedScan} selectScan={setSelectedScan}\n                    />\n                </div>\n\n                <div className=\"divider-vert\"/>\n\n                <div className=\"column\" id=\"column-right\">\n                    <Scan loadScans={loadScans} selectedScan={selectedScan} />\n                </div>\n            </div>\n        </main>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'spectre.css/dist/spectre.min.css';\nimport 'spectre.css/dist/spectre-icons.min.css';\n\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n// import reportWebVitals from './reportWebVitals';\n// reportWebVitals(console.log);"],"sourceRoot":""}