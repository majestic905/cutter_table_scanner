{"version":3,"sources":["hooks/useFetch.js","hooks/useModal.js","components/settings_modal.js","components/lensfun_modal.js","components/header.js","components/log.js","components/shared/tabs.js","components/shared/images.js","components/snapshot.js","components/calibration.js","app.js","index.js"],"names":["useFetch","url","useState","isLoading","setIsLoading","undefined","response","setResponse","error","setError","options","setOptions","doFetch","useCallback","useEffect","isUnmounted","sendRequest","a","ky","json","name","message","useModal","defaultIsOpened","isOpened","setIsOpened","openModal","closeModal","toggleModal","CamerasColumns","cameras","id","className","htmlFor","defaultValue","SettingsModal","data","setData","doSubmit","ev","preventDefault","body","position","target","elements","value","method","headers","JSON","stringify","btnClassName","cx","loading","onSubmit","onClick","type","LensfunModal","xml","lensfun","Header","getScan","isOpenedSettings","closeModalSettings","openModalSettings","isOpenedLensfun","closeModalLensfun","openModalLensfun","requestScan","searchParams","timeout","alert","Log","text","readOnly","Tab","isActive","active","data-tab-name","href","Tabs","children","DownloadableImage","src","alt","download","props","document","createElement","split","pop","appendChild","click","removeChild","Image","ImagesGrid","images","Component","isClickable","map","key","ResultImage","createdAt","Date","toISOString","slice","replace","Snapshot","scan","activeTab","setActiveTab","selectTab","currentTarget","dataset","tabName","original","undistorted","projected","result","image","thumb","log","Calibration","App","setScan","scanType","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c130c7da.chunk.js","sourcesContent":["import {useState, useEffect, useCallback} from 'react'\nimport ky from 'ky';\n\n\nconst useFetch = (url) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [response, setResponse] = useState(undefined);\n    const [error, setError] = useState(undefined);\n    const [options, setOptions] = useState({});\n\n\n    const doFetch = useCallback((options = {}) => {\n        setOptions(options);\n        setIsLoading(true);\n        setError(undefined);\n    }, []);\n\n\n    useEffect(() => {\n        if (!isLoading)\n            return;\n\n        let isUnmounted = false;\n\n        async function sendRequest() {\n            try {\n                const json = await ky(url, options).json();\n\n                if (isUnmounted)\n                    return;\n\n                setResponse(json);\n                setIsLoading(false);\n            } catch (error) {\n                if (isUnmounted)\n                    return;\n\n                if (error.name === 'HTTPError')\n                    setError((await error.response.json()).message);\n                else\n                    setError(error.message);\n\n                setIsLoading(false);\n            }\n        }\n\n        sendRequest();\n\n        return () => {\n            isUnmounted = true;\n        };\n    }, [isLoading, url, options]);\n\n    return [{isLoading, response, error}, doFetch];\n};\n\n\nexport default useFetch;","import {useState, useCallback} from 'react'\n\n\nconst useModal = (defaultIsOpened = false) => {\n    const [isOpened, setIsOpened] = useState(defaultIsOpened);\n\n    const openModal = useCallback(() => setIsOpened(true), [setIsOpened]);\n    const closeModal = useCallback(() => setIsOpened(false), [setIsOpened]);\n    const toggleModal = useCallback(() => setIsOpened(isOpened => !isOpened), [setIsOpened])\n\n    return {openModal, closeModal, toggleModal, isOpened};\n};\n\nexport default useModal;","import {useCallback, useEffect, useState} from \"react\";\nimport useFetch from \"../hooks/useFetch\";\nimport cx from \"classnames\";\n\n\nconst CamerasColumns = ({cameras}) => {\n    return (\n        <div id=\"cameras\" className=\"columns\">\n            <div className=\"column col-6\">\n                <label className=\"form-label text-bold\" htmlFor=\"camera-LU\">LU: Left Upper</label>\n                <textarea id=\"camera-LU\" name=\"LU\" className=\"form-input\" defaultValue={cameras['LU']}/>\n            </div>\n            <div className=\"column col-6\">\n                <label className=\"form-label text-bold\" htmlFor=\"camera-RU\">RU: Right Upper</label>\n                <textarea id=\"camera-RU\" name=\"RU\" className=\"form-input\" defaultValue={cameras['RU']}/>\n            </div>\n            <div className=\"column col-6\">\n                <label className=\"form-label text-bold\" htmlFor=\"camera-LL\">LL: Left Lower</label>\n                <textarea id=\"camera-LL\" name=\"LL\" className=\"form-input\" defaultValue={cameras['LL']}/>\n            </div>\n            <div className=\"column col-6\">\n                <label className=\"form-label text-bold\" htmlFor=\"camera-RL\">RL: Right Lower</label>\n                <textarea id=\"camera-RL\" name=\"RL\" className=\"form-input\" defaultValue={cameras['RL']}/>\n            </div>\n        </div>\n    )\n}\n\n\nconst SettingsModal = ({closeModal}) => {\n    const [data, setData] = useState();\n\n    const [{isLoading, response, error}, doFetch] = useFetch('/api/cameras');  // for both GET and POST\n\n    useEffect(doFetch, [doFetch]);\n\n    useEffect(() => {\n        if (response !== undefined && !data) { // GET\n            setData(response);\n        } else if (response !== undefined && data) // POST\n            closeModal();\n    }, [response, setData, closeModal]);\n\n    const doSubmit = useCallback(ev => {\n        ev.preventDefault();\n\n        const body = {};\n        for (const position of ['LU', 'LL', 'RL', 'RU'])\n            body[position] = ev.target.elements[position].value;\n\n\n        doFetch({\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(body)\n        });\n    }, [doFetch]);\n\n    const btnClassName = cx(\"btn btn-primary float-right mr-2\", {loading: isLoading});\n\n    return (\n        <form className=\"modal active\" onSubmit={doSubmit}>\n            <span className=\"modal-overlay\" onClick={closeModal}/>\n            <div className=\"modal-container modal-fullheight\">\n                <div className=\"modal-header\">\n                    <button type=\"button\" className=\"btn btn-link float-right\" onClick={closeModal}>Закрыть</button>\n                    <input type=\"submit\" className={btnClassName} value=\"Отправить\"/>\n\n                    <div className=\"modal-title h5\">Настройки</div>\n                </div>\n                <ul className=\"mt-0\">\n                   <li className=\"mt-0\">\n                       Значения table_section_size (миллиметры) напрямую в программе не используются, они здесь для того чтобы были.\n                   </li>\n                   <li className=\"mt-0\">\n                       Значения projected_image_size (пиксели) используются; задаются вручную; должны быть строго пропорциональны значениям table_section_size!\n                   </li>\n               </ul>\n                {error && <div className=\"modal-header pt-0\">\n                     <div className=\"toast toast-error\">{error}</div>\n                </div>}\n                <div className=\"modal-body pt-0\">\n                    {data && <CamerasColumns cameras={data}/>}\n                    {isLoading && <div className=\"loading loading-lg\"/>}\n                </div>\n            </div>\n        </form>\n    )\n};\n\n\nexport default SettingsModal;","import {useCallback, useEffect, useState} from \"react\";\nimport useFetch from \"../hooks/useFetch\";\nimport cx from \"classnames\";\n\n\nconst LensfunModal = ({closeModal}) => {\n    const [data, setData] = useState();\n\n    const [{isLoading, response, error}, doFetch] = useFetch('/api/lensfun');  // for both GET and POST\n\n    useEffect(doFetch, [doFetch]);\n\n    useEffect(() => {\n        if (response !== undefined && !data) { // GET\n            setData(response.xml);\n        } else if (response !== undefined && data) // POST\n            closeModal();\n    }, [response, setData, closeModal]);\n\n    const doSubmit = useCallback(ev => {\n        ev.preventDefault();\n\n        doFetch({\n            method: 'POST',\n            headers: { 'Content-Type': 'text/plain; charset=utf-8' },\n            body: ev.target.elements.lensfun.value\n        });\n    }, [doFetch]);\n\n    const btnClassName = cx(\"btn btn-primary float-right mr-2\", {loading: isLoading});\n\n    return (\n        <form className=\"modal active\" onSubmit={doSubmit}>\n            <span className=\"modal-overlay\" onClick={closeModal}/>\n            <div className=\"modal-container modal-fullheight\">\n                <div className=\"modal-header\">\n                    <button type=\"button\" className=\"btn btn-link float-right\" onClick={closeModal}>Закрыть</button>\n                    <input type=\"submit\" className={btnClassName} value=\"Отправить\"/>\n\n                    <div className=\"modal-title h5\">Lensfun XML</div>\n                </div>\n                {error && <div className=\"modal-header pt-0\">\n                     <div className=\"toast toast-error\">{error}</div>\n                </div>}\n                <div className=\"modal-body pt-0\">\n                    {data && <textarea name=\"lensfun\" defaultValue={data} className=\"form-input\"/>}\n                    {!data && <div className=\"loading loading-lg\"/>}\n                </div>\n            </div>\n        </form>\n    )\n};\n\n\nexport default LensfunModal;","import {useCallback, useEffect} from \"react\";\nimport cx from \"classnames\";\nimport useModal from \"../hooks/useModal\";\nimport useFetch from \"../hooks/useFetch\";\nimport SettingsModal from \"./settings_modal\";\nimport LensfunModal from \"./lensfun_modal\";\n\n\nconst Header = ({getScan}) => {\n    const {isOpened: isOpenedSettings, closeModal: closeModalSettings, openModal: openModalSettings} = useModal();\n    const {isOpened: isOpenedLensfun, closeModal: closeModalLensfun, openModal: openModalLensfun} = useModal();\n\n    const [{isLoading, response, error}, doFetch] = useFetch('/api/scan');\n\n    const requestScan = useCallback(type => {\n        doFetch({method: 'POST', searchParams: {type}, timeout: 50000});\n    }, [doFetch]);\n\n    useEffect(() => {\n        if (response)\n            alert('Сканирование выполнено');\n        else if (error)\n            alert(`Произошла ошибка, сканирование не выполнено: ${error}`);\n\n        if (response || error)\n            getScan();\n    }, [response, error, getScan]);\n\n    return (\n        <header className=\"navbar\">\n            <section className=\"navbar-section\">\n                <button className={cx(\"btn btn-primary mr-2\", {loading: isLoading})}\n                        onClick={() => requestScan('snapshot')}\n                >\n                    Сканировать\n                </button>\n\n                <button className={cx(\"btn btn-primary mr-2\", {loading: isLoading})}\n                        onClick={() => requestScan('calibration')}\n                >\n                    Калибровка точек\n                </button>\n\n                <button type=\"button\" className={cx('btn mr-2', {loading: isLoading})}\n                        onClick={openModalSettings}\n                >\n                    Настройки\n                </button>\n\n                <button type=\"button\" className={cx('btn', {loading: isLoading})}\n                        onClick={openModalLensfun}\n                >\n                    Lensfun\n                </button>\n            </section>\n\n            {isOpenedSettings && <SettingsModal closeModal={closeModalSettings} />}\n            {isOpenedLensfun && <LensfunModal closeModal={closeModalLensfun} />}\n        </header>\n    )\n}\n\nexport default Header;","const Log = ({text}) => {\n    return (\n        <textarea id=\"log\" className=\"form-input\" value={text} readOnly/>\n    );\n}\n\nexport default Log;","import cx from \"classnames\";\n\nexport const Tab = ({text, isActive, name, onClick}) => {\n    const className = cx(\"tab-item text-bold text-uppercase\", {active: isActive});\n    return (\n        <li className={className} data-tab-name={name} onClick={onClick}>\n            <a href=\"#\">{text}</a>\n        </li>\n    )\n}\n\nexport const Tabs = ({children}) => {\n    return (\n        <ul className=\"tab\">\n            {children}\n        </ul>\n    )\n}","export const DownloadableImage = ({url, src, alt, download, ...props}) => {\n    alt = alt || src;\n    url = url || src;\n\n    const onClick = () => {\n        let a = document.createElement('a');\n        a.href = url;\n        a.download = download || url.split('/').pop();\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n    };\n\n    return (\n        <img className=\"img-responsive clickable c-hand\" src={src} alt={alt} onClick={onClick} {...props}/>\n    )\n};\n\n\nconst Image = ({src, alt, ...props}) => {\n    alt = alt || src;\n\n    return (\n        <img className=\"img-responsive\" src={src} alt={alt} {...props} />\n    )\n};\n\n\nexport const ImagesGrid = ({images, isClickable}) => {\n    const Component = isClickable ? DownloadableImage : Image;\n\n    const children = ['LU', 'RU', 'LL', 'RL'].map(key =>\n        <div key={key} className=\"column col-6\">\n            <Component {...images[key]}/>\n        </div>\n    )\n\n    return (\n        <div className=\"container grid-lg images-grid\">\n            <div className=\"columns\">\n                {children}\n            </div>\n        </div>\n    )\n}","import {useCallback, useState} from \"react\";\nimport Log from \"./log\";\nimport {Tabs, Tab} from \"./shared/tabs\";\nimport {ImagesGrid, DownloadableImage} from \"./shared/images\";\n\n\nconst ResultImage = ({url, createdAt}) => {\n    createdAt = new Date(createdAt).toISOString().slice(0, 19).replace(/[-:T]/g, '_');\n\n    return (\n        <div className=\"container grid-lg\">\n            <DownloadableImage src={url} alt={url} url={url} download={`result_${createdAt}.jpg`} id=\"result\"/>\n        </div>\n    )\n}\n\n\nconst Snapshot = ({scan}) => {\n    const [activeTab, setActiveTab] = useState('result');\n    const selectTab = useCallback(ev => setActiveTab(ev.currentTarget.dataset.tabName), [setActiveTab]);\n\n    const images = {original: {}, undistorted: {}, projected: {}, result: scan.images.result};\n    for (const name of ['original', 'undistorted', 'projected']) {\n        for (const position of ['LU', 'LL', 'RU', 'RL']) {\n            const {image, thumb} = scan.images[name][position];\n            images[name][position] = {src: `${thumb}?${scan.createdAt}`, alt: image, url: image};\n        }\n    }\n\n    return (\n        <div>\n            <Tabs>\n                <Tab onClick={selectTab} name=\"original\" text=\"Original\" isActive={activeTab === \"original\"}/>\n                <Tab onClick={selectTab} name=\"undistorted\" text=\"Undistorted\" isActive={activeTab === \"undistorted\"}/>\n                <Tab onClick={selectTab} name=\"projected\" text=\"Projected\" isActive={activeTab === \"projected\"}/>\n                <Tab onClick={selectTab} name=\"result\" text=\"Result\" isActive={activeTab === \"result\"}/>\n                <Tab onClick={selectTab} name=\"log\" text=\"Log\" isActive={activeTab === \"log\"}/>\n            </Tabs>\n\n            {activeTab === \"original\" && <ImagesGrid images={images.original} isClickable/>}\n            {activeTab === \"undistorted\" && <ImagesGrid images={images.undistorted} isClickable/>}\n            {activeTab === \"projected\" && <ImagesGrid images={images.projected} isClickable/>}\n            {activeTab === \"result\" && <ResultImage url={images.result.image} createdAt={scan.createdAt}/>}\n            {activeTab === \"log\" && <Log text={scan.log}/>}\n        </div>\n    )\n}\n\n\nexport default Snapshot;","import {useCallback, useState} from \"react\";\nimport Log from \"./log\";\nimport {Tabs, Tab} from \"./shared/tabs\";\nimport {ImagesGrid} from \"./shared/images\";\n\n\nconst Calibration = ({scan}) => {\n    const [activeTab, setActiveTab] = useState('undistorted');\n    const selectTab = useCallback(ev => setActiveTab(ev.currentTarget.dataset.tabName), [setActiveTab]);\n\n    const images = {original: {}, undistorted: {}};\n    for (const name in images) {\n        for (const position of ['LU', 'LL', 'RU', 'RL']) {\n            const {image, thumb} = scan.images[name][position];\n            images[name][position] = {src: `${thumb}?${scan.createdAt}`, alt: image, url: image};\n        }\n    }\n\n    return (\n        <div>\n            <Tabs>\n                <Tab onClick={selectTab} name=\"original\" text=\"Original\" isActive={activeTab === \"original\"}/>\n                <Tab onClick={selectTab} name=\"undistorted\" text=\"Undistorted\" isActive={activeTab === \"undistorted\"}/>\n                <Tab onClick={selectTab} name=\"log\" text=\"Log\" isActive={activeTab === \"log\"}/>\n            </Tabs>\n\n            {activeTab === \"original\" && <ImagesGrid images={images.original} isClickable/>}\n            {activeTab === \"undistorted\" && <ImagesGrid images={images.undistorted} isClickable/>}\n            {activeTab === \"log\" && <Log text={scan.log}/>}\n        </div>\n    )\n}\n\n\nexport default Calibration;","import {useState, useEffect} from \"react\";\nimport useFetch from \"./hooks/useFetch\";\nimport Header from \"./components/header\";\nimport Snapshot from \"./components/snapshot\";\nimport Calibration from \"./components/calibration\";\nimport './app.scss';\n\n\nfunction App() {\n    const [scan, setScan] = useState(null);\n\n    const [{isLoading, response, error}, getScan] = useFetch(\"/api/scan\");\n\n    useEffect(getScan, [getScan]);\n\n    useEffect(() => {\n        if (response)\n            setScan(response);\n        else if (error)\n            alert(`Ошибка при загрузке скана: ${error}`);\n    }, [response, error]);\n\n    if (isLoading)\n        return <div className=\"loading mt-2\"/>;\n\n    return (\n        <main>\n            <Header getScan={getScan} />\n\n            {scan?.scanType === \"snapshot\" && <Snapshot scan={scan}/>}\n            {scan?.scanType === \"calibration\" && <Calibration scan={scan}/>}\n        </main>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'spectre.css/dist/spectre.min.css';\nimport 'spectre.css/dist/spectre-icons.min.css';\n\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n// import reportWebVitals from './reportWebVitals';\n// reportWebVitals(console.log);"],"sourceRoot":""}